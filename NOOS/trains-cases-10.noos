(define-episode (TRAINS-DESCRIPTION :id T1)
	(ncar 5)
	(cars
		(define ?X1 (car)
			(infront !X2)
			(loc 1)
			(nwhl 2)
			(ln long)
			(cshape engine)
			(npl 0)
		)
		(define ?X2 (car)
			(infront !X3)
			(loc 2)
			(nwhl 3)
			(ln long)
			(cshape openrect)
			(npl 3)
			(lcont (define (rectanglod)) (define (rectanglod)) (define (rectanglod)))
		)
		(define ?X3 (car)
			(infront !X4)
			(loc 3)
			(nwhl 2)
			(ln short)
			(cshape slopetop)
			(npl 1)
			(lcont (define (trianglod)))
		)
		(define ?X4 (car)
			(infront !X5)
			(loc 4)
			(nwhl 3)
			(ln long)
			(cshape openrect)
			(npl 1)
			(lcont (define (hexagonlod)))
		)
		(define ?X5 (car)
			(loc 5)
			(nwhl 2)
			(ln long)
			(cshape openrect)
			(npl 1)
			(lcont (define (circlelod)))
		)
	)
)

(define-episode (trains-problem :id TR1)
  (description T1)
  (solution east)
)



(define-episode (TRAINS-DESCRIPTION :id T2)
	(ncar 4)
	(cars
		(define ?X1 (car)
			(infront !X2)
			(loc 1)
			(nwhl 2)
			(ln long)
			(cshape engine)
			(npl 0)
		)
		(define ?X2 (car)
			(infront !X3)
			(loc 2)
			(nwhl 2)
			(ln short)
			(cshape ushaped)
			(npl 1)
			(lcont (define (trianglod)))
		)
		(define ?X3 (car)
			(infront !X4)
			(loc 3)
			(nwhl 2)
			(ln short)
			(cshape opentrap)
			(npl 1)
			(lcont (define (rectanglod)))
		)
		(define ?X4 (car)
			(loc 4)
			(nwhl 2)
			(ln short)
			(cshape closedrect)
			(npl 2)
			(lcont (define (circlelod)) (define (circlelod)))
		)
	)
)

(define-episode (trains-problem :id TR2)
  (description T2)
  (solution east)
)


(define-episode (TRAINS-DESCRIPTION :id T3)
	(ncar 4)
	(cars
		(define ?X1 (car)
			(infront !X2)
			(loc 1)
			(nwhl 2)
			(ln long)
			(cshape engine)
			(npl 0)
		)
		(define ?X2 (car)
			(infront !X3)
			(loc 2)
			(nwhl 2)
			(ln short)
			(cshape openrect)
			(npl 1)
			(lcont (define (circlelod)))
		)
		(define ?X3 (car)
			(infront !X4)
			(loc 3)
			(nwhl 2)
			(ln short)
			(cshape hexagon)
			(npl 1)
			(lcont (define (trianglod)))
		)
		(define ?X4 (car)
			(loc 4)
			(nwhl 3)
			(ln long)
			(cshape closedrect)
			(npl 1)
			(lcont (define (trianglod)))
		)

	)
)

(define-episode (trains-problem :id TR3)
  (description T3)
  (solution east)
)



(define-episode (TRAINS-DESCRIPTION :id T4)
	(ncar 5)
	(cars
		(define ?X1 (car)
			(infront !X2)
			(loc 1)
			(nwhl 2)
			(ln long)
			(cshape engine)
			(npl 0)
		)
		(define ?X2 (car)
			(infront !X3)
			(loc 2)
			(nwhl 2)
			(ln short)
			(cshape opentrap)
			(npl 1)
			(lcont (define (trianglod)))
		)
		(define ?X3 (car)
			(infront !X4)
			(loc 3)
			(nwhl 2)
			(ln short)
			(cshape dblopnrect)
			(npl 1)
			(lcont (define (trianglod)))
		)
		(define ?X4 (car)
			(infront !X5)
			(loc 4)
			(nwhl 2)
			(ln short)
			(cshape ellipse)
			(npl 1)
			(lcont (define (rectanglod)))
		)
		(define ?X5 (car)
			(loc 5)
			(nwhl 2)
			(ln short)
			(cshape openrect)
			(npl 1)
			(lcont (define (rectanglod)))
		)
	)
)

(define-episode (trains-problem :id TR4)
  (description T4)
  (solution east)
)


(define-episode (TRAINS-DESCRIPTION :id T5)
	(ncar 4)
	(cars
		(define ?X1 (car)
			(infront !X2)
			(loc 1)
			(nwhl 2)
			(ln long)
			(cshape engine)
			(npl 0)
		)
		(define ?X2 (car)
			(infront !X3)
			(loc 2)
			(nwhl 2)
			(ln short)
			(cshape dblopnrect)
			(npl 1)
			(lcont (define (trianglod)))
		)
		(define ?X3 (car)
			(infront !X4)
			(loc 3)
			(nwhl 3)
			(ln long)
			(cshape closedrect)
			(npl 1)
			(lcont (define (rectanglod)))
		)
		(define ?X4 (car)
			(loc 4)
			(nwhl 2)
			(ln short)
			(cshape closedrect)
			(npl 1)
			(lcont (define (circlelod)))
		)
	)
)

(define-episode (trains-problem :id TR5)
  (description T5)
  (solution east)
)


(define-episode (TRAINS-DESCRIPTION :id T6)
	(ncar 3)
	(cars
		(define ?X1 (car)
			(infront !X2)
			(loc 1)
			(nwhl 2)
			(ln long)
			(cshape engine)
			(npl 0)
		)
		(define ?X2 (car)
			(infront !X3)
			(loc 2)
			(nwhl 2)
			(ln long)
			(cshape closedrect)
			(npl 3)
			(lcont (define (circlelod)) (define (circlelod)) (define (circlelod)))
		)
		(define ?X3 (car)
			(loc 3)
			(nwhl 2)
			(ln short)
			(cshape openrect)
			(npl 1)
			(lcont (define (trianglod)))
		)
	)
)

(define-episode (trains-problem :id TR6)
  (description T6)
  (solution west)
)


(define-episode (TRAINS-DESCRIPTION :id T7)
	(ncar 4)
	(cars
		(define ?X1 (car)
			(infront !X2)
			(loc 1)
			(nwhl 2)
			(ln long)
			(cshape engine)
			(npl 0)
		)
		(define ?X2 (car)
			(infront !X3)
			(loc 2)
			(nwhl 2)
			(ln short)
			(cshape dblopnrect)
			(npl 1)
			(lcont (define (circlelod)))
		)
		(define ?X3 (car)
			(infront !X4)
			(loc 3)
			(nwhl 2)
			(ln short)
			(cshape ushaped)
			(npl 1)
			(lcont (define (trianglod)))
		)
		(define ?X4 (car)
			(loc 4)
			(nwhl 2)
			(ln long)
			(cshape jaggedtop)
			(npl 0)
		)
	)
)

(define-episode (trains-problem :id TR7)
  (description T7)
  (solution west)
)


(define-episode (TRAINS-DESCRIPTION :id T8)
	(ncar 3)
	(cars
		(define ?X1 (car)
			(infront !X2)
			(loc 1)
			(nwhl 2)
			(ln long)
			(cshape engine)
			(npl 0)
		)
		(define ?X2 (car)
			(infront !X3)
			(loc 2)
			(nwhl 3)
			(ln long)
			(cshape closedrect)
			(npl 1)
			(lcont (define (rectanglod)))
		)
		(define ?X3 (car)
			(loc 3)
			(nwhl 2)
			(ln short)
			(cshape ushaped)
			(npl 1)
			(lcont (define (circlelod)))
		)
	)
)

(define-episode (trains-problem :id TR8)
  (description T8)
  (solution west)
)


(define-episode (TRAINS-DESCRIPTION :id T9)
	(ncar 5)
	(cars
		(define ?X1 (car)
			(infront !X2)
			(loc 1)
			(nwhl 2)
			(ln long)
			(cshape engine)
			(npl 0)
		)
		(define ?X2 (car)
			(infront !X3)
			(loc 2)
			(nwhl 2)
			(ln short)
			(cshape opentrap)
			(npl 1)
			(lcont (define (circlelod)))
		)
		(define ?X3 (car)
			(infront !X4)
			(loc 3)
			(nwhl 2)
			(ln long)
			(cshape jaggedtop)
			(npl 1)
			(lcont (define (rectanglod)))
		)
		(define ?X4 (car)
			(infront !X5)
			(loc 4)
			(nwhl 2)
			(ln short)
			(cshape openrect)
			(npl 1)
			(lcont (define (rectanglod)))
		)
		(define ?X5 (car)
			(loc 5)
			(nwhl 2)
			(ln short)
			(cshape opentrap)
			(npl 1)
			(lcont (define (circlelod)))
		)
	)
)

(define-episode (trains-problem :id TR9)
  (description T9)
  (solution west)
)


(define-episode (TRAINS-DESCRIPTION :id T10)
	(ncar 3)
	(cars
		(define ?X1 (car)
			(infront !X2)
			(loc 1)
			(nwhl 2)
			(ln long)
			(cshape engine)
			(npl 0)
		)
		(define ?X2 (car)
			(infront !X3)
			(loc 2)
			(nwhl 2)
			(ln short)
			(cshape ushaped)
			(npl 1)
			(lcont (define (rectanglod)))
		)
		(define ?X3 (car)
			(loc 3)
			(nwhl 3)
			(ln long)
			(cshape closedrect)
			(npl 2)
			(lcont (define (rectanglod)) (define (rectanglod)))
		)
	)
)

(define-episode (trains-problem :id TR10)
  (description T10)
  (solution west)
)
